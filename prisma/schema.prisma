// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student?
  teacher   Teacher?
  passwordResetTokens PasswordResetToken[]
  mustChangePassword Boolean  @default(false)
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model Student {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  studentId   String   @unique 
  name        String
  department  Department @relation(fields: [departmentId], references: [id])
  departmentId String
  program     Program    @relation(fields: [programId], references: [id])
  programId   String
  batch       String
  currentSemester Int @default(1)
  email       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  enrollments Enrollment[]
  semesterGPAs SemesterGPA[]
}

model Teacher {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  name        String
  code        String  @unique
  department  Department @relation(fields: [departmentId], references: [id])
  departmentId String
  email       String   @unique
  designation String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]
}

model Department {
  id        String   @id @default(uuid())
  name      String   @unique
  programs  Program[]
  students  Student[]
  teachers  Teacher[]
  courses   Course[]
}

model Program {
  id          String   @id @default(uuid())
  name        String   @unique
  department  Department @relation(fields: [departmentId], references: [id])
  departmentId String
  students    Student[]
  courses     Course[]
}

model Course {
  id           String   @id @default(uuid())
  code         String   @unique
  name         String
  credit       Float
  semester     Int
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  program      Program    @relation(fields: [programId], references: [id])
  programId    String
  teacher      Teacher?  @relation(fields: [teacherId], references: [id])
  teacherId    String?
  enrollments  Enrollment[]
  resultStatuses CourseResultStatus[]
}

model Enrollment {
  id           String   @id @default(uuid())
  student      Student  @relation(fields: [studentId], references: [id])
  studentId    String
  course       Course   @relation(fields: [courseId], references: [id])
  courseId     String
  results      Result[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Result {
  id           String       @id @default(uuid())
  enrollment   Enrollment   @relation(fields: [enrollmentId], references: [id])
  enrollmentId String
  attendance   Float
  quiz1        Float
  quiz2        Float
  quiz3        Float
  quiz4        Float
  midterm      Float
  final        Float
  total        Float
  grade        String
  gradePoint   Float
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model CourseResultStatus {
  id         String   @id @default(uuid())
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String
  semester   Int
  status     ResultStatus @default(DRAFT)
  rejectionReason String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum ResultStatus {
  DRAFT
  SUBMITTED
  APPROVED
}

model SemesterGPA {
  id         String   @id @default(uuid())
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  String
  semester   Int
  gpa        Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@unique([studentId, semester])
}

